---
title: "Figures: Using ggplot2"
subtitle: "PSYC 640 - Fall 2023"
author: "Dustin Haraden, PhD"
format: 
  revealjs:
    multiplex: true
    scrollable: true
    slide-number: true
    incremental: false
    touch: true
    code-overflow: wrap
    theme: dark
execute: 
  echo: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, include = F}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

## Last Class

::: nonincremental
-   Comparing Means: $t$-test
    -   Independent Samples $t$-test Review
    -   Paired Samples $t$-test
:::

------------------------------------------------------------------------

## Looking Ahead

-   Plan to have 2 more labs that will be similar to the last lab

    -   Likely take place on 10/25 and sometime the week of 11/13

-   Outside of these labs, I am going to plan on having additional mini-labs

    -   Likely to take place on 11/1, 11/22 and 11/29 (will update based on how things are going in class)

------------------------------------------------------------------------

## Today...

Working with `ggplot2` to get some really fancy visualizations!

Maybe integrating some generative AI (ChatGPT) to help us out too

```{r, results = 'hide', message = F, warning = F}
# File management
library(here)
# for dplyr, ggplot2
library(tidyverse)
#Loading data
library(rio)

#for the penguins dataset

# command to install the 'palmerpenguins' package if it's not already installed
#install.packages('palmerpenguins')

# Load the 'palmerpenguins' package which contains the 'penguins' dataset
library(palmerpenguins)

#Remove Scientific Notation 
options(scipen=999)
```

------------------------------------------------------------------------

## Take a look at the data

Will be using a dataset from the `palmerpenguins` library ([link](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-distributions)) which is a dataset about...[penguins](https://www.youtube.com/watch?v=-GnLDJAgrws). This function will pull that data into our environment:

```{r}
# Load the 'penguins' dataset into the current R session
data(penguins)
```

Now we can get some descriptive statistics:

```{r}
#| code-fold: true
penguins %>%                  # Take the 'penguins' dataset...
  group_by(species) %>%       # Group the data by the 'species' column
  summarize(                   # Summarize the data for each species based on the following calculations:
    mean_flipper = mean(flipper_length_mm, na.rm = TRUE), # Calculate the mean of 'flipper_length_mm', removing any missing values
    mean_mass = mean(body_mass_g, na.rm = TRUE),          # Calculate the mean of 'body_mass_g', removing any missing values
    std_flipper = sd(flipper_length_mm, na.rm = TRUE),    # Calculate the standard deviation of 'flipper_length_mm', removing any missing values
    std_mass = sd(body_mass_g, na.rm = TRUE),             # Calculate the standard deviation of 'body_mass_g', removing any missing values
    cor_flip_mass = cor(flipper_length_mm, body_mass_g)   # Calculate the correlation between 'flipper_length_mm' and 'body_mass_g'
  )
```

# `ggplot2`

------------------------------------------------------------------------

## `ggplot2` from the `tidyverse`

Since we have already installed and loaded the library, we don't have to do anything else at this point!

`ggplot2` follows the "grammar of graphics"

-   Theoretical framework for creating data visualizations
-   Breaks the process down into separate components:

::: columns
::: {.column width="50%"}
Data

Aesthetics (`aes`)

Geometric Objects (`geoms`)
:::

::: {.column width="50%"}
Faceting

Themes
:::
:::

------------------------------------------------------------------------

## Grammar of Graphics

[![](/images/grammargraphics.webp){width="779"}](https://gkesari.medium.com/my-talk-on-grammar-of-graphics-the-secret-sauce-of-powerful-data-stories-3da618cf1bbf)

# `ggplot2` [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)

------------------------------------------------------------------------

## `ggplot2` syntax {.smaller}

There is a basic structure to create a plot within `ggplot2`, and consists of at least these three things:

1.  A Data Set
2.  Coordinate System
3.  Geoms - visual marks to represent the data points

In R it looks like this:

```{r, eval=FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))

#or how I like to do it
<DATA> %>% 
  ggplot(aes(<MAPPINGS>)) + 
  <GEOM_FUNCTION>()
```

------------------------------------------------------------------------

## `ggplot2` syntax

Let's start with a basic figure with `palmerpenguins`

**First** we will define the data that we are using and the variables we are visualizing

```{r, eval = FALSE}
#the dataset is called penguins

penguins %>%             # Take the 'penguins' dataset...
  ggplot(                # ...and create a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g)       # Map 'body_mass_g' to the y-axis
  )
```

What happens?

------------------------------------------------------------------------

We forgot to tell it what to do with the data!

Need to add the appropriate `geom` to have it plot points for each observation

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g)       # Map 'body_mass_g' to the y-axis
  ) + 
  geom_point()             # Add a layer to the plot that displays points for each observation
```

***\
Note:*** the `geom_point()` layer will inherit what is in the `aes()` in the previous layer

------------------------------------------------------------------------

## Adding in Color

Maybe we would like to have each of the points colored by their respective `species`

This information will be added to the `aes()` within the `geom_point()` layer

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g)       # Map 'body_mass_g' to the y-axis
  ) + 
  geom_point(              # Add a layer to the plot that displays points for each observation
    aes(color = species)   # Within the points layer, map the color of the points to the 'species' column of the dataset
  )
```

------------------------------------------------------------------------

## Including a fit line

Why don't we put in a line that represents the relationship between these variables?

We will want to add another layer/geom

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g)       # Map 'body_mass_g' to the y-axis
  ) + 
  geom_point(              # Add a layer to the plot that displays points for each observation
    aes(color = species)   # Within the points layer, map the color of the points to the 'species' column of the dataset
  ) + 
  geom_smooth()            # Add a layer that computes and displays a smoothed line (typically a loess curve) to show the trend in the data
```

\
That looks a little wonky...why is that? Did you get a note in the console?

------------------------------------------------------------------------

## Including a fit line

The `geom_smooth()` defaults to using a loess line to fit to the data

In order to update that, we need to change some of the defaults for that layer and specify that we want a "linear model" or `lm` function to the data

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g)       # Map 'body_mass_g' to the y-axis
  ) + 
  geom_point(              # Add a layer to the plot that displays points for each observation
    aes(color = species)   # Within the points layer, map the color of the points to the 'species' column of the dataset
  ) + 
  geom_smooth(method = 'lm')   # Add a layer that computes and displays a linear regression line (using 'lm' for linear model) to show the relationship between the x and y variables

```

\
Did that look a little better?

------------------------------------------------------------------------

## Individual fit lines

It might make more sense to have individual lines for each of the species instead of something that is across all

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g,       # Map 'body_mass_g' to the y-axis
        color = species)       # Map the color to the 'species' column of the dataset for all layers unless overridden
  ) + 
  geom_point()             # Add a layer to the plot that displays points for each observation
  + 
  geom_smooth(method = 'lm')   # Add a layer that computes and displays a linear regression line (using 'lm' for linear model) to show the relationship between the x and y variables

```

\
What did we move around from the last set of code?

------------------------------------------------------------------------

## Updating Labels/Title

It will default to including the variable names as the `x` and `y` labels, but that isn't something that makes sense. Also would be good to have a title!

We add on another layer called `labs()` for our labels ([link](https://ggplot2.tidyverse.org/reference/labs.html))

```{r, eval = FALSE}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm, # Map 'flipper_length_mm' to the x-axis
        y = body_mass_g,       # Map 'body_mass_g' to the y-axis
        color = species)       # Map the color to the 'species' column of the dataset for all layers unless overridden
  ) + 
  geom_point()             # Add a layer to the plot that displays points for each observation
  + 
  geom_smooth(method = 'lm')   # Add a layer that computes and displays a linear regression line (using 'lm' for linear model) to show the relationship between the x and y variables
  + 
  labs(
    title = "Palmer Penguins",             # Set the main title of the plot
    subtitle = "Body Mass by Flipper Length",  # Set the subtitle for the plot
    x = "Flipper Length (mm)",             # Label the x-axis
    y = "Body Mass (g)",                   # Label the y-axis
    color = "Species"                      # Label the color legend
  )
```

------------------------------------------------------------------------

## Penguin Histogram

Taken from the website for `palmerpenguins` ([link](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-distributions))

```{r}
penguins %>%               # Take the 'penguins' dataset...
  ggplot(                  # ...and start building a plot using the 'ggplot' function
    aes(x = flipper_length_mm) # Map 'flipper_length_mm' to the x-axis
  ) + 
  geom_histogram(          # Add a histogram layer to visualize the distribution of flipper lengths
    aes(fill = species),   # Map the fill color of the bars to the 'species' column of the dataset
    alpha = 0.5,           # Set the transparency of the bars to 0.5, making them semi-transparent
    position = "identity"  # Ensure the bars are overlaid directly on top of each other
  )

```

# Example 2

I have uploaded three datasets. I would like us to explore the datasets together to see what is going on with them.

------------------------------------------------------------------------

## The Three Datasets

```{r}
#| code-fold: true
data1 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data1.csv") %>% 
  mutate(dataset = "data1")   # Import the CSV file from the provided URL into 'data1' and add a new column 'dataset' with the value "data1" for all rows

data2 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data2.csv") %>% 
  mutate(dataset = "data2")   # Import the CSV file from the provided URL into 'data2' and add a new column 'dataset' with the value "data2" for all rows

data3 <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/data3.csv") %>% 
  mutate(dataset = "data3")   # Import the CSV file from the provided URL into 'data3' and add a new column 'dataset' with the value "data3" for all rows
```

We need to combine them together just to make things easier:

```{r}
three_data <- bind_rows(data1, data2, data3)   # Combine the rows of 'data1', 'data2', and 'data3' into a single data frame named 'three_data'
```

------------------------------------------------------------------------

## Descriptive Stats on the 3

```{r}
#| code-fold: true
three_data %>%  # Take the combined 'three_data' dataset...
  group_by(dataset) %>% # ...and group the data by the 'dataset' column (which indicates the source: 'data1', 'data2', or 'data3')
  summarize( # Summarize the data for each group (i.e., for each original dataset) based on the following calculations:
    mean_x = mean(x), # Calculate the mean of the 'x' column
    mean_y = mean(y), # Calculate the mean of the 'y' column
    std_x = sd(x),    # Calculate the standard deviation of the 'x' column
    std_y = sd(y),    # Calculate the standard deviation of the 'y' column
    cor_xy = cor(x,y) # Calculate the correlation between the 'x' and 'y' columns
  )
```

------------------------------------------------------------------------

## Visualize the datasets

Create a scatterplot for each of the datasets

But I didn't talk about how to do that for multiple datasets...

Check out [ChatGPT](https://chat.openai.com/)

------------------------------------------------------------------------

# Try it out on data

Take a look at the data that we have been using and try making various visualizations for two of the variables

```{r}
state_school <- import("https://raw.githubusercontent.com/dharaden/dharaden.github.io/main/data/NM-NY_CAS.csv")   
# Import the CSV file from the provided URL into the 'state_school' data frame
```

# Next time...

-   ANOVA!
